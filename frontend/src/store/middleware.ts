// frontend/src/store/middleware.ts
import { Middleware } from '@reduxjs/toolkit';
import type { RootState } from './index';
import { addToast } from './notificationSlice';
import { clearAuth } from './authSlice';

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
export const apiErrorMiddleware: Middleware<{}, RootState> = 
  (storeAPI) => (next) => (action: any) => {
    const result = next(action);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ rejected action –æ—Ç async thunk
    if (action.type.endsWith('/rejected')) {
      const error = action.payload || action.error?.message;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (action.type.includes('auth/') && error?.includes('401')) {
        storeAPI.dispatch(clearAuth());
        storeAPI.dispatch(addToast({
          id: Date.now().toString(),
          type: 'error',
          message: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.',
          duration: 5000,
        }));
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
      if (error && typeof error === 'string') {
        const criticalErrors = [
          'Network Error',
          'Connection failed',
          'Server Error',
          '500',
          '502',
          '503',
          '504'
        ];
        
        const isCritical = criticalErrors.some(criticalError => 
          error.toLowerCase().includes(criticalError.toLowerCase())
        );
        
        if (isCritical) {
          storeAPI.dispatch(addToast({
            id: Date.now().toString(),
            type: 'error',
            title: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
            message: '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            duration: 7000,
          }));
        }
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if (action.type.endsWith('/fulfilled')) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º success toast –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
      const successActions = [
        'auth/registerUser',
        'friend/sendRequest',
        'friend/acceptRequest',
        'user/updateProfile',
        'user/uploadAvatar',
      ];
      
      if (successActions.some(successAction => action.type.includes(successAction))) {
        const messages = {
          'auth/registerUser': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!',
          'friend/sendRequest': '–ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
          'friend/acceptRequest': '–ó–∞—è–≤–∫–∞ –≤ –¥—Ä—É–∑—å—è –ø—Ä–∏–Ω—è—Ç–∞!',
          'user/updateProfile': '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!',
          'user/uploadAvatar': '–ê–≤–∞—Ç–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω!',
        };
        
        const matchedAction = successActions.find(successAction => 
          action.type.includes(successAction)
        );
        
        if (matchedAction) {
          storeAPI.dispatch(addToast({
            id: Date.now().toString(),
            type: 'success',
            message: messages[matchedAction as keyof typeof messages],
            duration: 3000,
          }));
        }
      }
    }
    
    return result;
  };

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π (—Ç–æ–ª—å–∫–æ –≤ development)
export const loggingMiddleware: Middleware<{}, RootState> = 
  (storeAPI) => (next) => (action: any) => {
    if (process.env.NODE_ENV === 'development') {
      const prevState = storeAPI.getState();
      const result = next(action);
      const nextState = storeAPI.getState();
      
      console.group(`üöÄ Action: ${action.type}`);
      console.log('‚è∞ Time:', new Date().toLocaleTimeString());
      console.log('üì• Action:', action);
      console.log('üìä Previous State:', prevState);
      console.log('üìä Next State:', nextState);
      console.groupEnd();
      
      return result;
    }
    
    return next(action);
  };

// Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const activityMiddleware: Middleware<{}, RootState> = 
  (storeAPI) => (next) => (action: any) => {
    const result = next(action);
    
    // –°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userActivityActions = [
      'chat/sendMessage',
      'chat/setActiveChat',
      'message/send',
      'call/initiate',
      'call/accept',
      'user/updateStatus',
    ];
    
    if (userActivityActions.some(activityAction => 
        action.type.includes(activityAction))) {
      
      const state = storeAPI.getState();
      if (state.auth.isAuthenticated) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å heartbeat –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        console.log('User activity detected:', action.type);
      }
    }
    
    return result;
  };

// Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
export const settingsMiddleware: Middleware<{}, RootState> = 
  (storeAPI) => (next) => (action: any) => {
    const result = next(action);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    const settingsActions = [
      'user/updateSettings',
      'user/updateNotificationSettings',
      'user/updatePrivacySettings',
      'notification/updateSettings',
      'notification/toggleNotificationType',
      'notification/toggleDoNotDisturb',
    ];
    
    if (settingsActions.some(settingsAction => 
        action.type.includes(settingsAction))) {
      
      const state = storeAPI.getState();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ localStorage –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
      try {
        const settings = {
          user: state.user.settings,
          notification: state.notification.settings,
        };
        localStorage.setItem('userSettings', JSON.stringify(settings));
      } catch (error) {
        console.error('Failed to save settings to localStorage:', error);
      }
    }
    
    return result;
  };

// Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
export const validationMiddleware: Middleware<{}, RootState> = 
  (storeAPI) => (next) => (action: any) => {
    const result = next(action);
    
    if (process.env.NODE_ENV === 'development') {
      const state = storeAPI.getState();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
      const validationRules = [
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, —Ç–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
        () => {
          if (state.auth.isAuthenticated && !state.auth.user) {
            console.warn('üö® Validation Warning: User is authenticated but no user data found');
          }
        },
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
        () => {
          if (state.chat.activeChat) {
            const chatExists = state.chat.chats.some(chat => chat.id === state.chat.activeChat?.id);
            if (!chatExists) {
              console.warn('üö® Validation Warning: Active chat not found in chats list');
            }
          }
        },
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        () => {
          const unreadNotifications = state.notification.notifications.filter(n => !n.read);
          if (unreadNotifications.length !== state.notification.unreadCount) {
            console.warn('üö® Validation Warning: Unread count mismatch', {
              actual: unreadNotifications.length,
              stored: state.notification.unreadCount
            });
          }
        },
      ];
      
      validationRules.forEach(rule => {
        try {
          rule();
        } catch (error) {
          console.error('Validation rule failed:', error);
        }
      });
    }
    
    return result;
  };

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–±—ã—Ç–∏–π
export const websocketMiddleware: Middleware<{}, RootState> = 
  (storeAPI) => (next) => (action: any) => {
    const result = next(action);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket
    const websocketActions = [
      'chat/sendMessage',
      'chat/setTypingUsers',
      'user/updateStatus',
      'call/initiate',
      'call/accept',
      'call/decline',
      'call/end',
    ];
    
    if (websocketActions.some(wsAction => action.type.includes(wsAction))) {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ WebSocket
      // –≠—Ç–æ –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å WebSocket –∫–ª–∏–µ–Ω—Ç–æ–º
      console.log('WebSocket action:', action.type, action.payload);
    }
    
    return result;
  };

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ middleware
export const customMiddleware = [
  apiErrorMiddleware,
  activityMiddleware,
  settingsMiddleware,
  validationMiddleware,
  websocketMiddleware,
  // –î–æ–±–∞–≤–ª—è–µ–º loggingMiddleware —Ç–æ–ª—å–∫–æ –≤ development
  ...(process.env.NODE_ENV === 'development' ? [loggingMiddleware] : []),
];