import { Server as SocketIOServer } from 'socket.io';
import { Server as HttpServer } from 'http';
import { verifyAccessToken } from './jwt';
import { redis } from './database';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–∫–µ—Ç–µ
export interface SocketUser {
  userId: string;
  email: string;
  username: string;
  avatar?: string;
}

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Socket –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
declare module 'socket.io' {
  interface Socket {
    user?: SocketUser;
  }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Socket.IO
export const socketConfig = {
  // CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  cors: {
    origin: process.env.FRONTEND_URL || "http://localhost:5173",
    methods: ["GET", "POST"],
    credentials: true,
  },
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  pingTimeout: 60000, // 60 —Å–µ–∫—É–Ω–¥
  pingInterval: 25000, // 25 —Å–µ–∫—É–Ω–¥
  upgradeTimeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
  maxHttpBufferSize: 1e6, // 1MB
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  transports: ['websocket', 'polling'],
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞
  adapter: undefined, // –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–∑–∂–µ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞
};

// –°–æ–∑–¥–∞–Ω–∏–µ Socket.IO —Å–µ—Ä–≤–µ—Ä–∞
export const createSocketServer = (httpServer: HttpServer): SocketIOServer => {
  const io = new SocketIOServer(httpServer, socketConfig);
  
  // Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  io.use(async (socket, next) => {
    try {
      const token = socket.handshake.auth.token || socket.handshake.headers.authorization?.split(' ')[1];
      
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
      const payload = verifyAccessToken(token);
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–µ—à–∞ –∏–ª–∏ –ë–î
      const userKey = `user:${payload.userId}`;
      const userData = await redis.get(userKey);
      
      if (!userData) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      const user = JSON.parse(userData);
      socket.user = {
        userId: user.id,
        email: user.email,
        username: user.username,
        avatar: user.avatar,
      };
      
      next();
    } catch (error) {
      console.error('Socket auth error:', error);
      next(new Error('Authentication failed'));
    }
  });
  
  return io;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserRoom = (userId: string): string => {
  return `user:${userId}`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã —á–∞—Ç–∞
export const getChatRoom = (chatId: string): string => {
  return `chat:${chatId}`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –∑–≤–æ–Ω–∫–∞
export const getCallRoom = (callId: string): string => {
  return `call:${callId}`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export const getOnlineUsers = async (): Promise<SocketUser[]> => {
  try {
    const onlineUsersKey = 'online_users';
    const onlineUsersData = await redis.sMembers(onlineUsersKey);
    
    const users = await Promise.all(
      onlineUsersData.map(async (userId) => {
        const userKey = `user:${userId}`;
        const userData = await redis.get(userKey);
        return userData ? JSON.parse(userData) : null;
      })
    );
    
    return users.filter(Boolean);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    return [];
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–Ω–ª–∞–π–Ω
export const setUserOnline = async (userId: string, socketId: string): Promise<void> => {
  try {
    const onlineUsersKey = 'online_users';
    const userSocketKey = `user_socket:${userId}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω
    await redis.sadd(onlineUsersKey, userId);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> socket
    await redis.set(userSocketKey, socketId, { EX: 3600 }); // TTL 1 —á–∞—Å
    
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–Ω–ª–∞–π–Ω (socket: ${socketId})`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–ª–∞–π–Ω:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–Ω–ª–∞–π–Ω
export const setUserOffline = async (userId: string): Promise<void> => {
  try {
    const onlineUsersKey = 'online_users';
    const userSocketKey = `user_socket:${userId}`;
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω
    await redis.srem(onlineUsersKey, userId);
    
    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> socket
    await redis.del(userSocketKey);
    
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ñ—Ñ–ª–∞–π–Ω`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è socket ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserSocketId = async (userId: string): Promise<string | null> => {
  try {
    const userSocketKey = `user_socket:${userId}`;
    return await redis.get(userSocketKey);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è socket ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
};

// –°–æ–±—ã—Ç–∏—è Socket.IO
export const SOCKET_EVENTS = {
  // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  CONNECTION: 'connection',
  DISCONNECT: 'disconnect',
  
  // –°–æ–æ–±—â–µ–Ω–∏—è
  MESSAGE_SEND: 'message:send',
  MESSAGE_RECEIVE: 'message:receive',
  MESSAGE_TYPING: 'message:typing',
  MESSAGE_STOP_TYPING: 'message:stop_typing',
  
  // –ó–≤–æ–Ω–∫–∏
  CALL_INITIATE: 'call:initiate',
  CALL_ACCEPT: 'call:accept',
  CALL_DECLINE: 'call:decline',
  CALL_END: 'call:end',
  CALL_CANDIDATE: 'call:candidate',
  CALL_OFFER: 'call:offer',
  CALL_ANSWER: 'call:answer',
  
  // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞
  SCREEN_SHARE_START: 'screen:share:start',
  SCREEN_SHARE_STOP: 'screen:share:stop',
  
  // –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  USER_ONLINE: 'user:online',
  USER_OFFLINE: 'user:offline',
  USER_STATUS_CHANGE: 'user:status:change',
  
  // –ß–∞—Ç—ã
  CHAT_JOIN: 'chat:join',
  CHAT_LEAVE: 'chat:leave',
  CHAT_CREATED: 'chat:created',
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  NOTIFICATION: 'notification',
} as const;