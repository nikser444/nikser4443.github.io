import { Pool } from 'pg';
import { createClient } from 'redis';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL
const dbConfig = {
  user: process.env.DB_USER || 'postgres',
  host: process.env.DB_HOST || 'localhost',
  database: process.env.DB_NAME || 'messenger_db',
  password: process.env.DB_PASSWORD || 'password',
  port: parseInt(process.env.DB_PORT || '5432'),
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  max: 20, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ –ø—É–ª–µ
  idleTimeoutMillis: 30000, // –≤—Ä–µ–º—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  connectionTimeoutMillis: 2000, // —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
};

// –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ PostgreSQL
export const db = new Pool(dbConfig);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis
const redisConfig = {
  url: process.env.REDIS_URL || 'redis://localhost:6379',
  password: process.env.REDIS_PASSWORD || undefined,
  db: parseInt(process.env.REDIS_DB || '0'),
  retryDelayOnFailover: 100,
  enableReadyCheck: false,
  maxRetriesPerRequest: null,
};

// –ö–ª–∏–µ–Ω—Ç Redis –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–µ—Å—Å–∏–π
export const redis = createClient(redisConfig);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
db.on('connect', () => {
  console.log('‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω');
});

db.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ PostgreSQL:', err);
});

redis.on('connect', () => {
  console.log('‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω');
});

redis.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ Redis:', err);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
(async () => {
  try {
    await redis.connect();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:', error);
  }
})();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
export const testConnection = async (): Promise<boolean> => {
  try {
    await db.query('SELECT 1');
    await redis.ping();
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
export const closeConnections = async (): Promise<void> => {
  await db.end();
  await redis.quit();
  console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –∑–∞–∫—Ä—ã—Ç—ã');
};