// backend/src/utils/setupDirectories.ts
import fs from 'fs/promises';
import path from 'path';

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
 */
export class DirectorySetup {
  private static readonly UPLOAD_DIRS = [
    'uploads',
    'uploads/avatars',
    'uploads/files', 
    'uploads/temp'
  ];

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
   */
  static async createUploadDirectories(): Promise<void> {
    console.log('üìÅ Setting up upload directories...');
    
    for (const dir of this.UPLOAD_DIRS) {
      const dirPath = path.join(process.cwd(), dir);
      
      try {
        await fs.access(dirPath);
        console.log(`‚úÖ Directory exists: ${dir}`);
      } catch {
        try {
          await fs.mkdir(dirPath, { recursive: true });
          console.log(`‚ú® Created directory: ${dir}`);
        } catch (error) {
          console.error(`‚ùå Failed to create directory ${dir}:`, error);
          throw error;
        }
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º .gitkeep —Ñ–∞–π–ª—ã –¥–ª—è –ø—É—Å—Ç—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    await this.createGitKeepFiles();
    
    console.log('‚úÖ Upload directories setup completed');
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç .gitkeep —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö –∑–∞–≥—Ä—É–∑–∫–∏
   */
  private static async createGitKeepFiles(): Promise<void> {
    const gitKeepContent = '# This file ensures the directory is tracked by Git\n';
    
    for (const dir of this.UPLOAD_DIRS.slice(1)) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É uploads
      const gitKeepPath = path.join(process.cwd(), dir, '.gitkeep');
      
      try {
        await fs.access(gitKeepPath);
      } catch {
        try {
          await fs.writeFile(gitKeepPath, gitKeepContent);
          console.log(`üìù Created .gitkeep in ${dir}`);
        } catch (error) {
          console.warn(`‚ö†Ô∏è  Failed to create .gitkeep in ${dir}:`, error);
        }
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
   */
  static async checkDirectoryPermissions(): Promise<boolean> {
    console.log('üîç Checking directory permissions...');
    
    for (const dir of this.UPLOAD_DIRS) {
      const dirPath = path.join(process.cwd(), dir);
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è
        await fs.access(dirPath, fs.constants.R_OK);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
        await fs.access(dirPath, fs.constants.W_OK);
        
        console.log(`‚úÖ Directory permissions OK: ${dir}`);
      } catch (error) {
        console.error(`‚ùå Directory permission error in ${dir}:`, error);
        return false;
      }
    }
    
    console.log('‚úÖ All directory permissions are correct');
    return true;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
   */
  static async getDirectorySizes(): Promise<Record<string, number>> {
    const sizes: Record<string, number> = {};
    
    for (const dir of this.UPLOAD_DIRS) {
      const dirPath = path.join(process.cwd(), dir);
      sizes[dir] = await this.calculateDirectorySize(dirPath);
    }
    
    return sizes;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –±–∞–π—Ç–∞—Ö
   */
  private static async calculateDirectorySize(dirPath: string): Promise<number> {
    let totalSize = 0;
    
    try {
      const items = await fs.readdir(dirPath, { withFileTypes: true });
      
      for (const item of items) {
        const itemPath = path.join(dirPath, item.name);
        
        if (item.isDirectory()) {
          totalSize += await this.calculateDirectorySize(itemPath);
        } else {
          const stats = await fs.stat(itemPath);
          totalSize += stats.size;
        }
      }
    } catch (error) {
      console.warn(`Warning: Could not calculate size for ${dirPath}:`, error);
    }
    
    return totalSize;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  static async cleanupTempFiles(maxAge: number = 24 * 60 * 60 * 1000): Promise<void> {
    console.log('üßπ Cleaning up temporary files...');
    
    const tempDir = path.join(process.cwd(), 'uploads', 'temp');
    const now = Date.now();
    let deletedCount = 0;
    
    try {
      const files = await fs.readdir(tempDir);
      
      for (const file of files) {
        if (file === '.gitkeep') continue;
        
        const filePath = path.join(tempDir, file);
        const stats = await fs.stat(filePath);
        
        if (now - stats.mtime.getTime() > maxAge) {
          await fs.unlink(filePath);
          deletedCount++;
          console.log(`üóëÔ∏è  Deleted old temp file: ${file}`);
        }
      }
      
      console.log(`‚úÖ Cleanup completed. Deleted ${deletedCount} files`);
    } catch (error) {
      console.error('‚ùå Error during cleanup:', error);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
   */
  static formatBytes(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
   */
  static async checkDiskSpace(): Promise<{ free: number; total: number; used: number }> {
    try {
      const stats = await fs.statfs(process.cwd());
      
      return {
        free: stats.bavail * stats.bsize,
        total: stats.blocks * stats.bsize,
        used: (stats.blocks - stats.bavail) * stats.bsize
      };
    } catch (error) {
      console.warn('Could not get disk space info:', error);
      return { free: 0, total: 0, used: 0 };
    }
  }
}

// backend/server.ts (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π)
import express from 'express';
import cors from 'cors';
import path from 'path';
import { createServer } from 'http';
import { Server as SocketIOServer } from 'socket.io';
import dotenv from 'dotenv';

import { testConnection } from './src/config/database';
import { DirectorySetup } from './src/utils/setupDirectories';
import authRoutes from './src/routes/auth';
import userRoutes from './src/routes/users';
import chatRoutes from './src/routes/chats';
import messageRoutes from './src/routes/messages';
import friendRoutes from './src/routes/friends';
import callRoutes from './src/routes/calls';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const app = express();
const server = createServer(app);
const io = new SocketIOServer(server, {
  cors: {
    origin: process.env.FRONTEND_URL || "http://localhost:3000",
    methods: ["GET", "POST"]
  }
});

const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors({
  origin: process.env.FRONTEND_URL || "http://localhost:3000",
  credentials: true
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// API —Ä–æ—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/chats', chatRoutes);
app.use('/api/messages', messageRoutes);
app.use('/api/friends', friendRoutes);
app.use('/api/calls', callRoutes);

// –ë–∞–∑–æ–≤—ã–π —Ä–æ—É—Ç
app.get('/api/health', (req, res) => {
  res.json({ 
    success: true, 
    message: 'Server is running',
    timestamp: new Date().toISOString()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: 'Route not found'
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error('Global error handler:', error);
  
  res.status(error.status || 500).json({
    success: false,
    message: error.message || 'Internal server error',
    ...(process.env.NODE_ENV === 'development' && { stack: error.stack })
  });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    console.log('üöÄ Starting messenger server...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    const dbConnected = await testConnection();
    if (!dbConnected) {
      throw new Error('Database connection failed');
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    await DirectorySetup.createUploadDirectories();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const permissionsOK = await DirectorySetup.checkDirectoryPermissions();
    if (!permissionsOK) {
      throw new Error('Directory permissions check failed');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
    setInterval(async () => {
      await DirectorySetup.cleanupTempFiles();
    }, 60 * 60 * 1000);
    
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    server.listen(PORT, () => {
      console.log(`‚úÖ Server running on port ${PORT}`);
      console.log(`üåê API available at http://localhost:${PORT}/api`);
      console.log(`üìÅ Uploads available at http://localhost:${PORT}/uploads`);
    });
    
  } catch (error) {
    console.error('‚ùå Server startup failed:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë SIGTERM received, shutting down gracefully');
  server.close(() => {
    console.log('‚úÖ Server closed');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  console.log('üõë SIGINT received, shutting down gracefully');
  server.close(() => {
    console.log('‚úÖ Server closed');
    process.exit(0);
  });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();